## 描述数据集 {#sec-2_2}
应当用数据清晰、简洁的显示研究结果，以便研究者可以迅速把握数据的关键特征。多年来，人们发现，对于展示数据而言，表格和图是特别有用的方式。图表常常可以揭示数据的重要特征，如数据的范围、集中程度和对称性。本节将介绍一些常见的数据图表展示方式。

### 频率表和图 {#sec-2_2_1}
如果一个数据集中的数据差异较小，我们便可以以频率表（*frequency table*）的形式来方便的展现该数据集。例如，@tbl-StartingYearlySalaries 就是一个数据集的频率表，该数据集由 42 名最近毕业的电子工程专业的大学生的起始年薪（以千美元为单位，四舍五入）构成。@tbl-StartingYearlySalaries 告诉我们，最低起薪为 57000 美元，并且有四名毕业生的起薪为 57000 美元；最高起薪为 70000 美元，并且有一名学生的起薪为 70000 美元；最为普遍的起薪为 62000 美元，并且有 10 名学生拿到了 62000 美元的起薪。

```{r}
#| label: tbl-StartingYearlySalaries
#| tbl-cap: "起薪分布"
#| warning: false

library(knitr)
ss <- c(57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70)
f <- c(4, 1, 3, 5, 8, 10, 0, 5, 2, 3, 1)
df <- data.frame("Starting Salary" = ss, "Frequency" = f)
kable(df, align = "l")
```

可以用线图（*line graph*）来直观地显示频率表中的数据。如 @fig-StartingYearlySalaries1，在线图中，水平坐标轴用于绘制不同的数据值，而垂直直线的高度用于表示对应数据值出现的频率。

```{r}
#| label: fig-StartingYearlySalaries1
#| fig-cap: "起薪线图"
#| warning: false

library(ggplot2)  

df <- data.frame(  
  salary = c(57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70),  
  value_end = c(4, 1, 3, 5, 8, 10, 0, 5, 2, 3, 1),  
  value_start = rep(0, 11) 
)  

# 将类别转换为因子，以确保正确的顺序  
df$salary <- factor(df$salary, levels = df$salary, ordered = TRUE)  
 
ggplot(df, aes(x = salary, y = value_start, yend = value_end, color = salary)) +  
  geom_segment(size = 2) +                    # 绘制水平线表示每个“条形”  
  geom_point(aes(y = value_end), size = 3) +  # 在每个“条形”的末端添加点  
  theme_minimal() +  
  labs(x = "Starting Salary", y = "Frequency") +  
  scale_y_continuous(breaks = seq(1, 10, by = 1)) +  
  theme(legend.position = "none")           # 调整图例位置
```

当为 @fig-StartingYearlySalaries1 中的线条增加厚度时，@fig-StartingYearlySalaries1 就变成了 @fig-StartingYearlySalaries2 所示的条形图（*bar graph*）。

```{r}
#| label: fig-StartingYearlySalaries2
#| fig-cap: "起薪条形图"
#| warning: false

library(ggplot2)  

df <- data.frame(  
  salary = c(57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70),  
  value = c(4, 1, 3, 5, 8, 10, 0, 5, 2, 3, 1)
)  

# 将类别转换为因子，以确保正确的顺序  
df$salary <- factor(df$salary, levels = df$salary, ordered = TRUE)  
 
ggplot(df, aes(x = salary, y = value)) +  
  geom_bar(stat = "identity", fill = "steelblue") +  
  theme_minimal() +  
  xlab("Starting Salary") +  
  ylab("Frequency") +
  scale_y_continuous(breaks = seq(1, 10, by = 2))
```

另一种用于表示频数表的图形是折线图（*frequency polygon*），在折线图中，对于在数据集中出现的不同的数据值，其出现的次数为纵坐标，以此画出对应的点，然后用直线将这些点依次连接起来。@fig-StartingYearlySalaries3 给出了 @tbl-StartingYearlySalaries 对应的折线图。

```{r}
#| label: fig-StartingYearlySalaries3
#| fig-cap: "起薪折线图"
#| warning: false

library(ggplot2)  

df <- data.frame(  
  salary = c(57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70),  
  value = c(4, 1, 3, 5, 8, 10, 0, 5, 2, 3, 1)
)  

ggplot(df, aes(x=salary, y=value)) +   
  geom_line() +  
  labs(x="Starting Salary", y="Frequency") + 
  scale_y_continuous(breaks = seq(1, 10, by = 2)) + 
  theme_minimal()
```

### 相对频率表和图 {#sec-2_2_2}
一个数据集中有 $n$ 个值，如果 $f$ 是某个特定值的频率，那么$\frac{f}{n}$ 为该特定值的相对频率（*relative frequency*）。也就是说，一个值的相对频率是数据集中具有该值的数据所占的比例。可以用线图、条形图、折线图来表示相对频率。事实上，在相对频率图中，除了纵坐标的值是绝对频率图中的值除以数据点总数外，相对频率图看起来和绝对频率图没什么不同。

::: {#exm-2_2_a}
@tbl-StartingYearlySalaries2 是 @tbl-StartingYearlySalaries 的相对频率表。将 @tbl-StartingYearlySalaries 中相应的频率除以数据集的大小（42） 得到其对应的相对频率表。
:::

```{r}
#| label: tbl-StartingYearlySalaries2
#| tbl-cap: "起薪分布相对频率表"
#| warning: false

library(knitr)
ss <- c(57, 58, 59, 60, 61, 62, 63, 64, 66, 67, 70)
f <- c(4, 1, 3, 5, 8, 10, 0, 5, 2, 3, 1)
cnt = sum(f)
f <- f / cnt

df <- data.frame("Starting Salary" = ss, "Relative Frequency" = f)
kable(df, align = "l")
```

当数据集中的数据不是数值型数据时，通常使用饼图（*pie chart*）来表示相对频率。首先画一个圆，然后将其切分成不同的扇形区域，每一个扇区对应数据集中的一种数据类型。在饼图中，扇区的面积表示数据值的相对频率，其面积等于圆的总面积乘以数据值的相对频率。

::: {#exm-2_2_b}
根据一家肿瘤专科诊所登记的最近 200 名患者的数据，得到了一个关于不同类型肿瘤患者数的数据集。@fig-piechartc 使用饼图的形式来显示如上的数据集。

```{r}
library(knitr)

type <- c("Melanoma", "Bladder", "Colon", "Lung", "Breast", "Prostate")
num <- c(9, 12, 32, 42, 50, 55)  
value <- num / sum(num)

df <- data.frame("Type of Cancer" = type, "Number of New Cases" = num, "Relative Frequency" = value)

kable(df, align = "l")
```
:::

```{r}
#| label: fig-piechartc
#| fig-cap: "诊所数据饼图"
#| warning: false

library(ggplot2)
  
# 提供的数据  
type <- c("Melanoma", "Bladder", "Colon", "Lung", "Breast", "Prostate")
num <- c(9, 12, 32, 42, 50, 55)  
value <- num / sum(num)

df <- data.frame(type = type, num = num, value = value)
df$label <- paste(df$type, "\n", round(df$value * 100, 1), "%", sep="") 

# 绘制饼图  
ggplot(df, aes(x = "", y = value, fill = type)) +  
  geom_bar(width = 1, stat = "identity") +  
  coord_polar("y", start = 0) +  
  theme_void() +  
  theme(legend.title = element_blank()) +  
  scale_fill_brewer(palette = "Pastel1") +  
  labs(fill = "type") +  
  geom_text(aes(label = label),   
            position = position_stack(vjust = 0.5)) + # 添加百分比标签
  theme(legend.position = "none")
```

::: {.callout-note}
虽然我们经常使用饼图，尤其是在商业分析中，饼图更是得到了广泛的使用，但是统计学家则一直很排斥使用饼图。因为人们对长度的判断比面积更为精确，因此统计学家更倾向于使用条形图。在 R 中，对饼图的支持要比其他的工具差很多。
:::

### 分组数据，直方图，肩形图和茎叶图 {#sec-2_2_3}
如 @sec-2_2_2 所述，使用线图或条形图绘制数据值的频率通常是描述数据集的有效方法。然而，对于那些不同数值数量太多的数据集而言，就无法使用线图或条形图的方法来对数据进行描述。在这种情况下，我们可以先将数值分组或按类别进行分类，然后绘制落在每个分组中的数据值的数量。分组数量的选取需要在以下两者之间进行取舍：

* 较少的分组，但是将会丢失实际数据值中的很多信息；
* 较多多的分组，但是将导致每个分组中的数值频率太小，以至于无法从图中辨别出数据模型。

尽管典型的分组数为 5 ~ 10 个，但是适当的分组数量来自主观选择。当然，我们可以尝试不同的分组数，并对比看看哪张图表的效果最好。尽管不是必须的，但是在选择分组数时，通常会让不同分组之间的间隔长度保持一致。

分组的端点（*endpoint*）称之为分组边界（*class boundaries*）。我们将会采用左端包含原则，该原则规定分组中的数据包含其左端点，但不包含其右端。因此，例如，20–30 这个分组包含所有 $\ge$ 20 且 $<$ 30 的值。

@tbl-lamps_lifetime 给出了 200 只白炽灯的使用寿命。@tbl-lamps_lifetime_class 为 @tbl-lamps_lifetime 数据的分组频率表，其分组的间隔长度为 100，第一个分组从 500 开始。

```{r}
#| label: tbl-lamps_lifetime
#| tbl-cap: "200 个 白炽灯的寿命（Hour）"
#| warning: false

library(knitr)

data <- c(1067, 919, 855, 1092, 1157, 1195, 1022, 978, 923, 1333, 521, 933, 930, 807, 999, 932, 901, 1324, 996, 780, 1187, 1067, 824, 653, 844, 814, 1037, 1151, 1026, 1147, 1039, 1083, 1023, 984, 1134, 932, 998, 996, 610, 916, 1196, 785, 1162, 1170, 1195, 1340, 832, 1009, 811, 1217, 928, 1153, 954, 1063, 1035, 944, 818, 1250, 900, 1106, 1118, 1037, 980, 935, 1103, 1000, 863, 990, 883, 867, 1040, 1289, 856, 924, 938, 1078, 1133, 765, 1001, 895, 1126, 936, 929, 950, 1122, 938, 1157, 1151, 1085, 896, 946, 858, 1002, 909, 1049, 940, 1203, 1078, 704, 621, 958, 760, 878, 934, 788, 1143, 1035, 1112, 990, 1258, 699, 1083, 801, 1122, 1180, 1106, 775, 1105, 709, 860, 918, 1156, 920, 948, 905, 972, 1035, 1045, 970, 1237, 956, 1102, 1009, 765, 958, 902, 958, 1311, 1037, 702, 1071, 1069, 830, 1063, 1077, 1021, 1062, 1157, 1122, 1115, 833, 1320, 890, 1303, 1011, 1102, 854, 1178, 1138, 951, 1101, 949, 992, 966, 910, 1058, 730, 980, 935, 1069, 1170, 1067, 931, 970, 932, 904, 1192, 922, 1150, 1091, 880, 1029, 658, 912, 1292, 1116, 880, 1173, 1184, 954, 824, 529, 1081, 1171, 705, 1425, 1110, 1149, 972, 1002)

kable(matrix(data, nrow = 20, ncol = 10, byrow = TRUE))
```

```{r}
#| label: tbl-lamps_lifetime_class
#| tbl-cap: "200 个 白炽灯的寿命（Hour）分布表"
#| warning: false

library(knitr)

data <- c(1067, 919, 855, 1092, 1157, 1195, 1022, 978, 923, 1333, 521, 933, 930, 807, 999, 932, 901, 1324, 996, 780, 1187, 1067, 824, 653, 844, 814, 1037, 1151, 1026, 1147, 1039, 1083, 1023, 984, 1134, 932, 998, 996, 610, 916, 1196, 785, 1162, 1170, 1195, 1340, 832, 1009, 811, 1217, 928, 1153, 954, 1063, 1035, 944, 818, 1250, 900, 1106, 1118, 1037, 980, 935, 1103, 1000, 863, 990, 883, 867, 1040, 1289, 856, 924, 938, 1078, 1133, 765, 1001, 895, 1126, 936, 929, 950, 1122, 938, 1157, 1151, 1085, 896, 946, 858, 1002, 909, 1049, 940, 1203, 1078, 704, 621, 958, 760, 878, 934, 788, 1143, 1035, 1112, 990, 1258, 699, 1083, 801, 1122, 1180, 1106, 775, 1105, 709, 860, 918, 1156, 920, 948, 905, 972, 1035, 1045, 970, 1237, 956, 1102, 1009, 765, 958, 902, 958, 1311, 1037, 702, 1071, 1069, 830, 1063, 1077, 1021, 1062, 1157, 1122, 1115, 833, 1320, 890, 1303, 1011, 1102, 854, 1178, 1138, 951, 1101, 949, 992, 966, 910, 1058, 730, 980, 935, 1069, 1170, 1067, 931, 970, 932, 904, 1192, 922, 1150, 1091, 880, 1029, 658, 912, 1292, 1116, 880, 1173, 1184, 954, 824, 529, 1081, 1171, 705, 1425, 1110, 1149, 972, 1002)

intervals <- seq(500, 1500, by = 100)
group <- cut(data, intervals, right=FALSE)
kable(table("Class Interval" = group))
```

分组数据的条形图中，其不同的分组彼此相邻，我们称之为直方图（*histogram*）。直方图的纵坐标可以表示分组的频率或相对频率，当表示分组频率时该图为频率直方图，当表示分组相对频率时为相对频率直方图。@fig-lamps_lifetime_hist 给出了 @tbl-lamps_lifetime_class 中数据的频率直方图。

```{r}
#| label: fig-lamps_lifetime_hist
#| fig-cap: "200 个 白炽灯的寿命（Hour）分布直方图"
#| warning: false

library(ggplot2)

data <- c(1067, 919, 855, 1092, 1157, 1195, 1022, 978, 923, 1333, 521, 933, 930, 807, 999, 932, 901, 1324, 996, 780, 1187, 1067, 824, 653, 844, 814, 1037, 1151, 1026, 1147, 1039, 1083, 1023, 984, 1134, 932, 998, 996, 610, 916, 1196, 785, 1162, 1170, 1195, 1340, 832, 1009, 811, 1217, 928, 1153, 954, 1063, 1035, 944, 818, 1250, 900, 1106, 1118, 1037, 980, 935, 1103, 1000, 863, 990, 883, 867, 1040, 1289, 856, 924, 938, 1078, 1133, 765, 1001, 895, 1126, 936, 929, 950, 1122, 938, 1157, 1151, 1085, 896, 946, 858, 1002, 909, 1049, 940, 1203, 1078, 704, 621, 958, 760, 878, 934, 788, 1143, 1035, 1112, 990, 1258, 699, 1083, 801, 1122, 1180, 1106, 775, 1105, 709, 860, 918, 1156, 920, 948, 905, 972, 1035, 1045, 970, 1237, 956, 1102, 1009, 765, 958, 902, 958, 1311, 1037, 702, 1071, 1069, 830, 1063, 1077, 1021, 1062, 1157, 1122, 1115, 833, 1320, 890, 1303, 1011, 1102, 854, 1178, 1138, 951, 1101, 949, 992, 966, 910, 1058, 730, 980, 935, 1069, 1170, 1067, 931, 970, 932, 904, 1192, 922, 1150, 1091, 880, 1029, 658, 912, 1292, 1116, 880, 1173, 1184, 954, 824, 529, 1081, 1171, 705, 1425, 1110, 1149, 972, 1002)

df <- data.frame(value = data)
breaks_vector <- seq(from = 500, to = 1500, by = 100)

ggplot(df, aes(x = value)) +  
  geom_histogram(breaks = breaks_vector, fill = "lightblue", color = "black") +  
  xlab("incandescent lamps lifetime(Hour)") +  
  ylab("Frequency")
```

很多时候，我们需要绘制累积频率图（*cumulative frequency graph*）或者累积相对频率图（*cumulative relative frequency graph*）。在累积频率（相对频率）图的横坐标上，一个点代表一个可能的数据值，其对应的纵坐标为值小于或等于该数据值的数据数量（或比例）。@fig-lamps_lifetime_cumfreq 给出了 @tbl-lamps_lifetime 中所示数据的累积相对频率图。从这个图中我们可以发现，使用寿命小于 1500（小时） 的白炽灯占比为 100%，使用寿命 $\le$ 900 的占比大约为 40% ，使用寿命 $\le$ 1100 的占比大约为 80%，……我们通常又把累积频率图称为肩形图（*ogive*）。

```{r}
#| label: fig-lamps_lifetime_cumfreq
#| fig-cap: "200 个 白炽灯的寿命（Hour）累积频率图"
#| warning: false

library(ggplot2)

data <- c(1067, 919, 855, 1092, 1157, 1195, 1022, 978, 923, 1333, 521, 933, 930, 807, 999, 932, 901, 1324, 996, 780, 1187, 1067, 824, 653, 844, 814, 1037, 1151, 1026, 1147, 1039, 1083, 1023, 984, 1134, 932, 998, 996, 610, 916, 1196, 785, 1162, 1170, 1195, 1340, 832, 1009, 811, 1217, 928, 1153, 954, 1063, 1035, 944, 818, 1250, 900, 1106, 1118, 1037, 980, 935, 1103, 1000, 863, 990, 883, 867, 1040, 1289, 856, 924, 938, 1078, 1133, 765, 1001, 895, 1126, 936, 929, 950, 1122, 938, 1157, 1151, 1085, 896, 946, 858, 1002, 909, 1049, 940, 1203, 1078, 704, 621, 958, 760, 878, 934, 788, 1143, 1035, 1112, 990, 1258, 699, 1083, 801, 1122, 1180, 1106, 775, 1105, 709, 860, 918, 1156, 920, 948, 905, 972, 1035, 1045, 970, 1237, 956, 1102, 1009, 765, 958, 902, 958, 1311, 1037, 702, 1071, 1069, 830, 1063, 1077, 1021, 1062, 1157, 1122, 1115, 833, 1320, 890, 1303, 1011, 1102, 854, 1178, 1138, 951, 1101, 949, 992, 966, 910, 1058, 730, 980, 935, 1069, 1170, 1067, 931, 970, 932, 904, 1192, 922, 1150, 1091, 880, 1029, 658, 912, 1292, 1116, 880, 1173, 1184, 954, 824, 529, 1081, 1171, 705, 1425, 1110, 1149, 972, 1002)

df <- data.frame(value = data)
df$value <- df$value[order(df$value)]
df$cumulative_freq <- cumsum(rep(1/nrow(df), nrow(df))) 

ggplot(df, aes(x = value, y = cumulative_freq)) +  
  geom_step(direction = "vh", color = "blue") +  
  xlab("incandescent lamps lifetime") +  
  ylab("Cumulative Relative Frequency") +   
  theme_minimal()
```

对于中小型数据集而言，茎叶图（*stem-leaf plot*）是一种有效的数据组织方式。可以把每个数据值分为茎和叶两部分来获得茎叶图。例如，如果数据都是两位整数值，那么我们可以把十位数作为茎，个位数作为叶。例如，值 62 的茎叶图表示为：

``` {.bash filename="62 的茎叶图"}
Stem Leaf
  6   2
```

62，67 两个数据的茎叶图表示为：

``` {.bash filename="62，67 的茎叶图"}
Stem Leaf
  6  2,7
```

::: {#exm-2_2_c}
@tbl-us_daily_min_temputer 给出了美国 35 个城市的每日最低气温的月平均值和年平均值。@tbl-us_daily_min_temputer 中的每日最低温度的年平均值可以用下面的茎叶图表示。

```{r}
#| warning: false

df <- read.table("../misc/US_minimum_temperature.csv", header=TRUE, sep=",")
stem(df$Annual.avg.)
```
:::

::: {.callout-note}
由于 R 中的 `stem()` 并不支持小数，因此对于 @tbl-us_daily_min_temputer 中所示的年平均值会先进行四舍五入转成整数，然后再画茎叶图。因此，这里给的茎叶图和原书中的不一致。
:::

```{r}
#| label: tbl-us_daily_min_temputer
#| tbl-cap: "1961年~1990年，美国指定城市的每日最低气温表。数据来源：Source: U.S. National Oceanic and Atmospheric Administration, Climatography of the United States, No. 81。"
#| warning: false

library(knitr)
df <- read.table("../misc/US_minimum_temperature.csv", header=TRUE, sep=",")
kable(df)
```